@page "/ProfilePage"

@using SEP3_Tier1.Models
@using System.Dynamic
@using SEP3_Tier1.Authentication
@using SEP3_Tier1.Data
@using SEP3_Tier1.Data.BookSale
@using SEP3_Tier1.Data.Purchase
@using SEP3_Tier1.Data.Users
@using Syncfusion.Blazor.Navigations

@inject ISaleService SaleService
@inject ICustomerService CustomerService
@inject IPurchaseService PurchaseService
@inject IModalService Modal

<h3>Profile Page</h3>

<!--#region UserSales-->



@if (salesToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!salesToShow.Any())
{
    <p>
        <em>No Sales Were Found</em>
    </p>
}
else
{
    <h1>Books for sale</h1>
    
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Edition</th>
            <th>Condition</th>
            <th>Subject</th>
            <th>Image</th>
            <th>Price</th>
            <th>HardCopy</th>
            <th>Description</th>
            <th>Update</th>
            <th>Delete</th>
            <th>Pending</th>
        </tr>
        </thead>
        <tbody>
        @foreach (BookSale item in salesToShow)
        {
            if (item.isEditing)
            {
                <tr>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.title" @bind="item.title">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.author" @bind="item.author">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.edition" @bind="item.edition">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.condition" @bind="item.condition">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.subject" @bind="item.subject">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.image" @bind="item.image">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.price" @bind="item.price">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.hardCopy" @bind="item.hardCopy">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.description" @bind="item.description">
                    </td>
                    <td>
                        <button @onclick="() => InitiateEdit(item.bookSaleID)">
                            <i class="oi oi-file" style="color: blue"></i>
                        </button>
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td>@item.title</td>
                    <td>@item.author</td>
                    <td>@item.edition</td>
                    <td>@item.condition</td>
                    <td>@item.subject</td>
                    <td>@item.image</td>
                    <td>@item.price</td>
                    <td>@item.hardCopy</td>
                    <td>@item.description</td>
                    <td></td>
                    <td>
                        <button @onclick="() => EnableEditing(true, item.bookSaleID)">
                            <i class="oi oi-file" style="color: blue"></i>
                        </button>
                    </td>
                    <td></td>
                    <td>
                        <button @onclick="() => ShowPendingBuyers(item.bookSaleID)"></button>
                    </td>
                    <td>
                        <button @onclick="() => DeleteBookSale(item.bookSaleID)">
                            <i class="oi oi-trash" style="color: red"></i>
                        </button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
}

<!--#endregion-->

<!--#region PendingPurchases-->

<h1>Book reservations</h1>

@if (purchaseRequests == null) {
    <p>
        <em>Loading...</em>
    </p>
} else if (!purchaseRequests.Any()) {
    <p>
        <em>No requests pending</em>
    </p>
}
else {
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Edition</th>
            <th>Condition</th>
            <th>Subject</th>
            <th>Image</th>
            <th>Price</th>
            <th>HardCopy</th>
            <th>Seller</th>
        </tr>
        </thead>
        <tbody>
        @foreach (PurchaseRequest purchaseRequest in purchaseRequests) {
            BookSale sale = purchaseRequest.bookSale;
            
            <tr contenteditable="true">
                <td>@sale.title</td>
                <td>@sale.author</td>
                <td>@sale.edition</td>
                <td>@sale.condition</td>
                <td>@sale.subject</td>
                <td>@sale.image</td>
                <td>@sale.price</td>
                <td>@sale.hardCopy</td>
                <td>@sale.username</td>
                <td><button @onclick="@(() => DeletePurchaseRequest(purchaseRequest.requestID))"></button></td>
            </tr>
        }
        </tbody>
    </table>
}

<!--#endregion-->

<!--#region userInformation-->
<h1>Update profile</h1>

@if (currentUser == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!currentUser.Any())
{
    <p>
        <em>No User Were Found</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Username</th>
            <th>Role</th>
            <th>Password</th>
            <th>Postcode</th>
            <th>Address</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Phone Number</th>
            <th>Rating</th>
            <th>Update</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Customer customer in currentUser)
        {
            {
                if (customer.isEditing)
                {
                    <tr>
                        <td>
                        </td>
                        <td>
                        </td>
                       <td>
                            <input type="text" class="form-control" placeholder="@customer.password" @bind="customer.password">
                        </td>
                        <td>
                            <input type="text" class="form-control" placeholder="@customer.postCode" @bind="customer.postCode">
                        </td>
                        <td>
                            <input type="text" class="form-control" placeholder="@customer.address" @bind="customer.address">
                        </td>
                        <td>
                            <input type="text" class="form-control" placeholder="@customer.firstName" @bind="customer.firstName">
                        </td>
                        <td>
                            <input type="text" class="form-control" placeholder="@customer.lastName" @bind="customer.lastName">
                        </td>
                        <td>
                            <input type="text" class="form-control" placeholder="@customer.email" @bind="customer.email">
                        </td>
                        <td>
                            <input type="text" class="form-control" placeholder="@customer.phoneNumber" @bind="customer.phoneNumber">
                        </td>
                        <td>
                            <input type="text" class="form-control" placeholder="@customer.rating" @bind="customer.rating">
                        </td>
 

                        <td>
                            <button @onclick="() => InitiateEditCustomer(customer.username)">
                                <i class="oi oi-file" style="color: blue"></i>
                            </button>
                        </td>

                    </tr>
                }

                else
                {
                    <tr contenteditable="true">
                        <td>@customer.username</td>
                        <td>@customer.role</td>
                        <td>@customer.password</td>
                        <td>@customer.postCode</td>
                        <td>@customer.address</td>
                        <td>@customer.firstName</td>
                        <td>@customer.lastName</td>
                        <td>@customer.email</td>
                        <td>@customer.phoneNumber</td>
                        <td>@customer.rating</td>
                        <td>
                            <button @onclick="() => EnableEditingCustomer(true, customer.username)">
                                <i class="oi oi-file" style="color: blue"></i>
                            </button>
                        </td>
                    </tr>
                }
            }
        }
        </tbody>
    </table>
   

}

<!--#endregion-->


@code {
    private IList<BookSale> allBookSalesForUser;
    private IList<BookSale> salesToShow;
    private IList<Customer> currentUser;
    private IList<PurchaseRequest> purchaseRequests;
    

    #region updateInformation
    
    private string updatedTitle = "";
    private string updatedAuthor = "";
    private string updatedEdition = "";
    private string updatedCondition = "";
    private string updatedSubject = "";
    private string updatedImage = "";
    private double? updatedPrice = 0;
    private bool updatedHardCopy = false;
    private string updatedDescription = "";

    private string postcode = "";
    private string address = "";
    private string firstName = "";
    private string lastName = "";
    private string email = "";
    private int phoneNumber = 0;
    private double rating = 0;
    private string password = "";

    private string nameValue;
    private int valueStar;

    private void EnableEditing(bool flag, int id)
    {
        BookSale saleToBeUpdated = salesToShow.First(i => i.bookSaleID == id);
        saleToBeUpdated.isEditing = flag;
    }
    #endregion
    
    #region updateMethods
    
    private void EnableEditing(bool flag, int id)
    {
        BookSale saleToBeUpdated = salesToShow.First(i => i.bookSaleID == id);
        saleToBeUpdated.isEditing = flag;
    }

    private void InitiateEdit(int id)
    {
        BookSale saleToBeUpdated = salesToShow.First(i => i.bookSaleID == id);

        updatedTitle = saleToBeUpdated.title;
        updatedAuthor = saleToBeUpdated.author;
        updatedEdition = saleToBeUpdated.edition;
        updatedCondition = saleToBeUpdated.condition;
        updatedSubject = saleToBeUpdated.subject;
        updatedImage = saleToBeUpdated.image;
        updatedPrice = saleToBeUpdated.price;
        updatedHardCopy = saleToBeUpdated.hardCopy;
        updatedDescription = saleToBeUpdated.description;
        EditSale(id);
    }

    private void EditSale(int id)
    {
        BookSale saleToBeUpdated = salesToShow.First(i => i.bookSaleID == id);
        SaleService.UpdateAsync(saleToBeUpdated, updatedTitle, updatedAuthor, updatedEdition, updatedCondition, updatedSubject, updatedImage, updatedPrice, updatedHardCopy, updatedDescription);
        saleToBeUpdated.isEditing = false;
    }

    // edit customer

    private void EnableEditingCustomer(bool flag, string username)
    {
        Customer customerToBeUpdated = currentUser.First(i => i.username == username);
        currentUser.First().isEditing = flag;
    }

    private void InitiateEditCustomer(string username)
    {
        Customer customerToBeUpdated = currentUser.First(i => i.username == username);


        postcode = customerToBeUpdated.postCode;
        address = customerToBeUpdated.address;
        firstName = customerToBeUpdated.firstName;
        lastName = customerToBeUpdated.lastName;
        email = customerToBeUpdated.email;
        phoneNumber = customerToBeUpdated.phoneNumber;
        rating = customerToBeUpdated.rating;
        password = customerToBeUpdated.password;

        EditCustomer(username);
    }

    private void EditCustomer(string username)
    {
        Customer customerToBeUpdated = currentUser.First(i => i.username == username);
        CustomerService.UpdateCustomerAsync(customerToBeUpdated, postcode, address, firstName, lastName, email, phoneNumber, rating, password);
        customerToBeUpdated.isEditing = false;
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        string username = CustomAuthenticationStateProvider.cachedUser.username; // Uses the cached User from Login to identify the specific username, and showing the related information to that user
        
        allBookSalesForUser = await SaleService.GetBookSaleAsync(username);
        salesToShow = allBookSalesForUser;
        currentUser = await CustomerService.GetCustomerAsync(username);
        purchaseRequests = await PurchaseService.GetPurchaseRequestAsync(username);
    }
    
    private async Task DeletePurchaseRequest(int requestId)
    {
        PurchaseRequest toRemove = purchaseRequests.First(t => t.requestID == requestId);
        await PurchaseService.DeletePurchaseRequestAsync(requestId);
        purchaseRequests.Remove(toRemove);
    }

    private async Task ShowPendingBuyers(int id) {
        var parameters = new ModalParameters();
        parameters.Add(nameof(PendingSales.SaleId), id);
        
        Modal.Show<PendingSales>("Pending Sale", parameters);
    }

    private async Task DeleteBookSale(int itemBookSaleId)
    {
        BookSale toBeRemoved = allBookSalesForUser.First(t => t.bookSaleID == itemBookSaleId);
        await SaleService.RemoveSaleAsync(itemBookSaleId);
        salesToShow.Remove(toBeRemoved);
    }

    private void OnChange(object args, string ratingWithStars)
    {

        Console.Write($"{nameValue} value changed to {valueStar}");
    }

}