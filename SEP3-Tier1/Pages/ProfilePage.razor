@page "/ProfilePage"
@using SEP3_Tier1.Models.Users
@using System.Dynamic
@using SEP3_Tier1.Data
@using SEP3_Tier1.Models.BookSale

@inject ISaleService SaleService


<h3>Profile Page</h3>

@if (salesToShow == null) {
    <p>
        <em>Loading...</em>
    </p>
} else if (!salesToShow.Any()) {
    <p>
        <em>No Sales Were Found</em>
    </p>
}
else {
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Author</th>
            <th>Edition</th>
            <th>Condition</th>
            <th>Subject</th>
            <th>Image</th>
            <th>Price</th>
            <th>HardCopy</th>
            <th>Description</th>
            <th>Update</th>
            <th>Delete</th>
        </tr>
        </thead>
        <tbody>
        @foreach (BookSale item in salesToShow) {
            if (item.isEditing) {
                <tr>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.title" @bind="item.title">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.author" @bind="item.author">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.edition" @bind="item.edition">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.condition" @bind="item.condition">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.subject" @bind="item.subject">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.image" @bind="item.image">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.price" @bind="item.price">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.hardCopy" @bind="item.hardCopy">
                    </td>
                    <td>
                        <input type="text" class="form-control" placeholder="@item.description" @bind="item.description">
                    </td>
                    <td>
                        <button @onclick="() => InitiateEdit(item.bookSaleID)">
                            <i class="oi oi-file" style="color: blue"></i>
                        </button>
                    </td>
                    
                </tr>
            }
            else {
                <tr>
                    <td>@item.title</td>
                    <td>@item.author</td>
                    <td>@item.edition</td>
                    <td>@item.condition</td>
                    <td>@item.subject</td>
                    <td>@item.image</td>
                    <td>@item.price</td>
                    <td>@item.hardCopy</td>
                    <td>@item.description</td>
                    <td><button @onclick="() => EnableEditing(true, item.bookSaleID)">
                        <i class="oi oi-file" style="color: blue"></i>
                    </button></td>
                </tr>
            }
        }
        </tbody>
    </table>
}




@code {
    private IList<BookSale> allBookSalesForUser;
    private IList<BookSale> salesToShow;

    private string updatedTitle = "";
    private string updatedAuthor = "";
    private string updatedEdition = "";
    private string updatedCondition = "";
    private string updatedSubject = "";
    private string updatedImage = "";
    private double? updatedPrice = 0;
    private bool updatedHardCopy = false;
    private string updatedDescription = "";
    
    

    private void EnableEditing(bool flag, int id) {
        BookSale saleToBeUpdated = salesToShow.First(i => i.bookSaleID == id);
        saleToBeUpdated.isEditing = flag;
    }

    private void InitiateEdit(int id) {
        BookSale saleToBeUpdated = salesToShow.First(i => i.bookSaleID == id);

        updatedTitle = saleToBeUpdated.title;
        updatedAuthor = saleToBeUpdated.author;
        updatedEdition = saleToBeUpdated.edition;
        updatedCondition = saleToBeUpdated.condition;
        updatedSubject = saleToBeUpdated.subject;
        updatedImage = saleToBeUpdated.image;
        updatedPrice = saleToBeUpdated.price;
        updatedHardCopy = saleToBeUpdated.hardCopy;
        EditSale(id);

    }

    private void EditSale(int id) {
        BookSale saleToBeUpdated = salesToShow.First(i => i.bookSaleID == id);
        SaleService.UpdateAsync(saleToBeUpdated, updatedTitle, updatedAuthor, updatedEdition, updatedCondition, updatedSubject, updatedImage, updatedPrice, updatedHardCopy, updatedDescription);
        saleToBeUpdated.isEditing = false;
    }
    
    
    
    protected override async Task OnInitializedAsync() {
        allBookSalesForUser = await SaleService.GetAllBookSales();
        salesToShow = allBookSalesForUser;
    }

}