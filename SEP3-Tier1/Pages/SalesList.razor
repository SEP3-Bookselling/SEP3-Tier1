@page "/"
@using SEP3_Tier1.Data
@using SEP3_Tier1.Models
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@using SEP3_Tier1.Authentication
@using SEP3_Tier1.Data.BookSale
@using SEP3_Tier1.Data.Purchase
@using Blazored.Modal.Services
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs
@using SEP3_Tier1.Authentication
@inject ISaleService SaleService
@inject IPurchaseService PurchaseService
@inject IModalService Modal
@inject NavigationManager NavigationManager;

<h3>SalesList</h3>


<p>
    <input type="text" @oninput="@((arg) => ExecuteFilter(arg))" style="width:80vw"/>
</p>


<p>
    Filter by:

    <div class="form-group">
        <select @bind="Selection" style="width:200px">
            <option>Username</option>
            <option>Title</option>
            <option>Author</option>
            <option>Subject</option>
            <option>Price</option>
            <option>Description</option>
        </select>
    </div>


</p>


<div class="container">
    @if (salesToShow == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else 
    {
        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Edition</th>
                <th>Condition</th>
                <th>Subject</th>
                <th>Image</th>
                <th>Price</th>
                <th>HardCopy</th>
                
                <AuthorizeView Policy="Customer">
                    <th>AddToCart</th>
                    <th>Seller</th>
                  
                </AuthorizeView>

                <AuthorizeView Policy="Moderator">
                    <th>Id</th>
                    <th>Delete</th>
                </AuthorizeView>
            </tr>
            </thead>
            <tbody>
            @foreach (BookSale item in salesToShow) 
            {
                <tr contenteditable="true">
                    <td>@item.title</td>
                    <td>@item.author</td>
                    <td>@item.edition</td>
                    <td>@item.condition</td>
                    <td>@item.subject</td>
                    <td>@item.image</td>
                    <td>@item.price</td>
                    <td>@item.hardCopy</td>
                    <AuthorizeView Policy="Customer">
                        <td>
                            <button style="background-color: dodgerblue" @onclick="@(() => AddToCart(item))">
                                <p style="font-weight: bold ; color: whitesmoke">Add To Cart</p>
                            </button>
                        </td>
                        <td>
                            @item.username
                            <button @onclick="(() => GoToProfilePage(item.username))">
                                <i class="oi oi-person" style="color:cornflowerblue"></i>
                            </button>
                        </td>
                    </AuthorizeView>
                    <AuthorizeView Policy="Moderator">
                        <td>@item.bookSaleID</td>
                        <td>
                            <button @onclick="@(() => DeleteSale(item.bookSaleID))">
                                <i class="oi oi-trash" style="color: red"></i>
                            </button>
                        </td>
                    </AuthorizeView>
                </tr>
            }
            </tbody>
        </table>
    }
</div>


@code{

    public static string usernameOfOtherGuy { get; set; }
    string username;

    private IList<BookSale> allSales;
    private IList<BookSale> salesToShow;
    private IList<BookSale> cartItems;

    private string Selection = "";
    private string filterOptions;
    
    private async Task AddToCart(BookSale bookSale)
    {
        if (bookSale.username.Equals(CustomAuthenticationStateProvider.cachedUser.username)) {
            Modal.Show<ErrorPage>("Cannot add own sale to cart");
            
        } 
        else if(cartItems.Any(sale => sale.bookSaleID == bookSale.bookSaleID)) {
            Modal.Show<ErrorPage>("Item is already in cart");
            
        } 
        else {
            await PurchaseService.AddToCartAsync(bookSale);
        }
    }

    private async Task DeleteSale(int id) {
        BookSale toRemove = salesToShow.First(t => t.bookSaleID == id);
        await SaleService.DeleteSaleAsync(id);
        salesToShow.Remove(toRemove);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            username = CustomAuthenticationStateProvider.cachedUser.username;
        }
        catch (NullReferenceException e)
        {
            username = "";
            Console.WriteLine(e);
        }
        
        allSales = await SaleService.GetBookSaleAsync("");
        salesToShow = allSales;
        cartItems = await PurchaseService.GetCartItems();
    }

    private void ExecuteFilter(ChangeEventArgs changeEventArgs)
    {
        filterOptions = changeEventArgs.Value.ToString();

        try
        {
            switch (Selection)
            {
                case "Username":
                    salesToShow = allSales.Where(t => (filterOptions != null && t.username.Contains(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "Title":
                    salesToShow = allSales.Where(t => (filterOptions != null && t.title.Contains(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "Author":
                    salesToShow = allSales.Where(t => (filterOptions != null && t.author.Contains(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "Subject":
                    salesToShow = allSales.Where(t => (filterOptions != null && t.subject.Contains(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "Price":
                    salesToShow = allSales.Where(t => (filterOptions != null && t.price == Double.Parse(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "Description":
                    salesToShow = allSales.Where(t => (filterOptions != null && t.description.Contains(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;
            }
        }
        catch (FormatException e)
        {
            Console.WriteLine(e);
            salesToShow = allSales;
        }
    }

    public void GoToProfilePage(string username)
    {
        usernameOfOtherGuy = username;
        Console.WriteLine(username);
        if (this.username.Equals(username))
        {
            NavigationManager.NavigateTo("/ProfilePage");
        }
        else
        {
            NavigationManager.NavigateTo("/OtherProfilePages");
        }
        
    }

}