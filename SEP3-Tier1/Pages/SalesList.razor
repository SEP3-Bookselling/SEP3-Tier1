@page "/SalesList"
@using SEP3_Tier1.Data
@using SEP3_Tier1.Models
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@inject ISaleService SaleService
@inject IPurchaseService PurchaseService

<h3>SalesList</h3>

<div class="container">
    @if (salesToShow == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Edition</th>
                <th>Condition</th>
                <th>Subject</th>
                <th>Image</th>
                <th>Price</th>
                <th>HardCopy</th>
                <th>Username</th>
                <th>Id</th>
                <th>AddToCart</th>
                <th>Update</th>
                <th>Delete</th>

            </tr>
            </thead>
            <tbody>
            @foreach (BookSale item in salesToShow)
            {
                <tr contenteditable="true">
                    <td>@item.title</td>
                    <td>@item.author</td>
                    <td>@item.edition</td>
                    <td>@item.condition</td>
                    <td>@item.subject</td>
                    <td>@item.image</td>
                    <td>@item.price</td>
                    <td>@item.hardCopy</td>
                    <td>@item.username</td>
                    <td>@item.bookSaleID</td>
                    <td><button @onclick="@(() => AddToCart(item))">Add To Cart</button></td>
                    <td><button @onclick="@(() => UpdateSale(item))"></button></td>
                    <td><button @onclick="@(() => DeleteSale(item.bookSaleID))"></button></td>
                </tr>
            }
            </tbody>
        </table>}
   
    
   
</div>



@code{


    private IList<BookSale> allSales;
    private IList<BookSale> salesToShow;

    private async Task AddToCart(BookSale bookSale)
    {
        await PurchaseService.AddToCartAsync(bookSale);
    }

    private async Task DeleteSale(int id) {
        BookSale toRemove = salesToShow.First(t => t.bookSaleID == id);
        await SaleService.RemoveSaleAsync(id);
        salesToShow.Remove(toRemove);
    }

    private async Task UpdateSale(BookSale saleToUpdate) {
        
    }

    protected override async Task OnInitializedAsync()
    {
        allSales = await SaleService.GetBookSaleAsync("");
        salesToShow = allSales;
        

    }

}