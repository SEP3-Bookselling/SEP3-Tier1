@page "/SalesList"
@using SEP3_Tier1.Data
@using SEP3_Tier1.Models
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Grids
@using SEP3_Tier1.Authentication
@using SEP3_Tier1.Data.BookSale
@using SEP3_Tier1.Data.Purchase
@using Blazored.Modal.Services
@inject ISaleService SaleService
@inject IPurchaseService PurchaseService
@inject IModalService Modal

<h3>SalesList</h3>

<div class="container">
    
    

    @if (salesToShow == null) {
        <p>
            <em>Loading...</em>
        </p>
    }
    else {
        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Edition</th>
                <th>Condition</th>
                <th>Subject</th>
                <th>Image</th>
                <th>Price</th>
                <th>HardCopy</th>
                <th>Seller</th>
                <th>Id</th>
                <th>AddToCart</th>
                <th>Update</th>
                <th>Delete</th>

            </tr>
            </thead>

            <tbody>
            @foreach (BookSale sale in salesToShow) {
                <tr contenteditable="true" name="">
                    <td>@sale.title</td>
                    <td>@sale.author</td>
                    <td>@sale.edition</td>
                    <td>@sale.condition</td>
                    <td>@sale.subject</td>
                    <td>@sale.image</td>
                    <td>@sale.price</td>
                    <td>@sale.hardCopy</td>
                    <td>@sale.username</td>
                    <td>@sale.bookSaleID</td>
                    <td><button @onclick="@(() => AddToCart(sale))">Add To Cart</button></td>
                    <td><button @onclick="@(() => UpdateSale(sale))"></button></td>
                    <td><button @onclick="@(() => DeleteSale(sale.bookSaleID))"></button></td>
                </tr>
            }
            </tbody>
        </table>}
   
   
    

</div>



@code{


    private IList<BookSale> allSales;
    private IList<BookSale> salesToShow;
    private IList<BookSale> cartItems;


    private async Task AddToCart(BookSale bookSale)
    {
        if (bookSale.username.Equals(CustomAuthenticationStateProvider.cachedUser.username)) {
            Modal.Show<ErrorPage>("Cannot add own sale to cart");
            
        } 
        else if(cartItems.Any(sale => sale.bookSaleID == bookSale.bookSaleID)) {
            Modal.Show<ErrorPage>("Item is already in cart");

        } 
        else {
            await PurchaseService.AddToCartAsync(bookSale);
        }
    }

    private async Task DeleteSale(int id) {
        BookSale toRemove = salesToShow.First(t => t.bookSaleID == id);
        await SaleService.DeleteSaleAsync(id);
        salesToShow.Remove(toRemove);
    }

    private async Task UpdateSale(BookSale saleToUpdate) {
        
    }

    protected override async Task OnInitializedAsync()
    {
        allSales = await SaleService.GetBookSaleAsync("");
        salesToShow = allSales;
        cartItems = await PurchaseService.GetCartItems();
    }

}