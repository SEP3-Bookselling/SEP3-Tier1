@page "/AdminstratorPage"
@using SEP3_Tier1.Data.Users
@using SEP3_Tier1.Models
@inject IUserService UserService;
@inject NavigationManager NavigationManager


<h3>AdminstratorPage</h3>
<EditForm Model="@user">
    <DataAnnotationsValidator/>

    <div class="form-group">
        Username: <br/>
        <InputText @bind-Value="user.username"/>
        <ValidationMessage For="() => user.username"/>
    </div>
    <div>
        Password: <br/>
        <InputText @bind-Value="user.password"/>
        <ValidationMessage For="() => user.password"/>
    </div>

    <div class="form-group">
        Role: <br/>
        <InputSelect @bind-Value="user.role">
            @foreach (var role in roles)
            {
                <option>@role</option>
            }
        </InputSelect>
        <ValidationMessage For="() => user.role"/>
    </div>


    <p class="action">
        <br/>
        <button class="btn btn-primary" @onclick="CreateUser">
            Create User
        </button>
    </p>

</EditForm>


<div class="container">
    @if (users == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Username</th>
                <th>Role</th>
                <th>Delete</th>
            </tr>
            </thead>
            <tbody>
            @foreach (User user in users)
            {
                <tr contenteditable="true">
                    <td>@user.username</td>
                    <td>@user.role</td>
                    <td>
                        <button @onclick="(() => DeleteUser(user.username))">
                            <i class="oi oi-trash" style="color:red"/>
                        </button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }



</div>

@code {

    private IList<string> roles;
    private IList<User> users;
    
    private User user = new User();
    private string username = null;

    protected override async Task OnInitializedAsync()
    {
        roles = new List<string>()
        {
            "",
            "Admin",
            "Moderator"
        };
        
        users = await UserService.GetAllUsersAsync(username);
    }

    public async Task CreateUser()
    {
        await UserService.CreateUserAsync(user);
        NavigationManager.NavigateTo("/");

    }

    private async Task DeleteUser(string userUsername)
    {
        User toRemove = users.First(t => t.username.Equals(userUsername));
        await UserService.DeleteUserAsync(userUsername);
        users.Remove(toRemove);
    }
    

}