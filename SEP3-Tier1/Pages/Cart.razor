@page "/Cart"
@using SEP3_Tier1.Models
@using SEP3_Tier1.Data
@using SEP3_Tier1.Authentication
@using SEP3_Tier1.Data.Purchase
@inject IPurchaseService PurchaseService
@inject IModalService Modal

<h3>Cart</h3>

<div class="container">
    @if (CartItems == null || CartItems.Count == 0)
    {
        <p>
            <em>Cart is empty...</em>
        </p>
    }
    else
    {
        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Edition</th>
                <th>Condition</th>
                <th>Subject</th>
                <th>Image</th>
                <th>Price</th>
                <th>HardCopy</th>
                <th>Username</th>
                <th>Delete</th>

            </tr>
            </thead>
            <tbody>
            @foreach (BookSale item in CartItems)
            {
                <tr contenteditable="true">
                    <td>@item.title</td>
                    <td>@item.author</td>
                    <td>@item.edition</td>
                    <td>@item.condition</td>
                    <td>@item.subject</td>
                    <td>@item.image</td>
                    <td>@item.price</td>
                    <td>@item.hardCopy</td>
                    <td>@item.username</td>
                    <td><button @onclick="@(() => DeleteBookSaleAsync(item))">
                        <i class="oi oi-trash" style="color: red"></i>
                    </button></td>
                </tr>
            }
            </tbody>
        </table>}
    <button style="background-color: dodgerblue" @onclick="@(ConfirmPurchaseAsync)">
        <p style="font-weight: bold ; color: whitesmoke" >Confirm Purchase</p>
    </button>
   
    
   
</div>



@code {

    private IList<BookSale> CartItems;
    private IList<PurchaseRequest> purchaseRequests;
    private User user;
    private string username = "";

    protected override async Task OnInitializedAsync()
    {
        CartItems = await PurchaseService.GetCartItems();
        purchaseRequests = new List<PurchaseRequest>();
        user = CustomAuthenticationStateProvider.cachedUser;
        username = user.username;
    }
    
    
    private async Task DeleteBookSaleAsync(BookSale sale)
    {
        CartItems.Remove(sale);
    }

    private async Task ConfirmPurchaseAsync() {
        if (CartItems.Count != 0) {
            foreach (BookSale item in CartItems) {
                PurchaseRequest toAdd = new PurchaseRequest {
                    bookSale = item,
                    buyer = username,
                    seller = item.username
                };
            
                purchaseRequests.Add(toAdd);
            }
            await PurchaseService.CreatePurchaseRequestAsync(purchaseRequests);
            CartItems.Clear();
        }
        else {
            Modal.Show<ErrorPage>("No items in cart");
        }
        
    }

}